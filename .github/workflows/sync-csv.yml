name: Sync CSV from Google Sheet

on:
  schedule:
    # Esegui alle 12:00 e 16:00 UTC (14:00 e 18:00 ora italiana in inverno)
  #  - cron: '35 * * * *'  # Ogni ora al minuto 32
     - cron: '00 12 * * *'  # 12:00 UTC 
     - cron: '00 16 * * *'  # 16:00 UTC
  workflow_dispatch: # Permette esecuzione manuale

jobs:
  sync-csv:
    runs-on: ubuntu-latest
    # Esegui solo sul branch main
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download CSV from Google Sheet
      run: |
        # URL del tuo Google Sheet
        SHEET_URL="https://docs.google.com/spreadsheets/d/e/2PACX-1vRlCr9IBCVP3rpbY7YCGNFKR-mqjqejWSx2DqKPiWkHbf0Xe7PkJ0xM7pNyPCbetPdRiL9qq11YbYW4/pub?gid=318461464&single=true&output=csv"
        
        echo "üìÑ Scaricamento CSV da Google Sheets..."
        
        # Scarica seguendo redirect con retry
        for i in {1..3}; do
          curl -L -s --fail \
            -H "User-Agent: Mozilla/5.0 (compatible; GitHub-Actions)" \
            -H "Accept: text/csv,application/csv,*/*" \
            -H "Cache-Control: no-cache" \
            "$SHEET_URL" -o new_monit_patti_pa.csv
            
          if [ $? -eq 0 ] && [ -s new_monit_patti_pa.csv ]; then
            break
          else
            echo "‚ö†Ô∏è Tentativo $i fallito, riprovo..."
            sleep 5
          fi
        done
        
        # Verifica finale
        if [ ! -s new_monit_patti_pa.csv ]; then
          echo "‚ùå Errore: File CSV vuoto dopo tutti i tentativi"
          exit 1
        fi
        
        # Controlla che non sia HTML
        if grep -q -i "<html>\|<head>\|<body>" new_monit_patti_pa.csv; then
          echo "‚ùå Errore: Ricevuto HTML invece di CSV"
          echo "üîç Contenuto ricevuto:"
          head -10 new_monit_patti_pa.csv
          exit 1
        fi
        
        # Validazione CSV base
        LINES=$(wc -l < new_monit_patti_pa.csv)
        if [ "$LINES" -lt 1 ]; then
          echo "‚ùå CSV vuoto o invalido"
          exit 1
        fi
        
        echo "‚úÖ CSV scaricato con successo"
        echo "üìä Righe totali: $LINES"
        echo "üîç Prima riga:"
        head -1 new_monit_patti_pa.csv
        
    - name: Check for changes
      id: changes
      run: |
        # Crea cartella dati se non esiste
        mkdir -p dati
        
        if [ -f "dati/monit_patti_pa.csv" ]; then
          if cmp -s "dati/monit_patti_pa.csv" "new_monit_patti_pa.csv"; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "üìä Nessuna modifica rilevata"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "üîÑ Modifiche rilevate"
          fi
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "üÜï Primo caricamento"
        fi
        
    - name: Backup and update files
      if: steps.changes.outputs.changes == 'true'
      run: |
        # Timestamp italiano (UTC+1 in inverno, UTC+2 in estate)
        DATE=$(date -u +"%Y-%m-%d")
        TIME=$(date -u +"%H-%M")
        HOUR=$(date -u +"%H")
        
        # Crea directory per backup se non esiste
        mkdir -p "backups/$DATE"
        
        # Se esiste il file principale, fai backup
        if [ -f "dati/monit_patti_pa.csv" ]; then
          BACKUP_FILE="backups/$DATE/monit_patti_pa_$TIME.csv"
          if [ ! -f "$BACKUP_FILE" ]; then
            cp "dati/monit_patti_pa.csv" "$BACKUP_FILE"
            echo "üíæ Backup creato: $BACKUP_FILE"
          fi
        fi
        
        # Aggiorna il file principale nella cartella dati
        mv "new_monit_patti_pa.csv" "dati/monit_patti_pa.csv"
        echo "üîÑ File principale aggiornato: dati/monit_patti_pa.csv"
        
        # Determina se √® l'esecuzione serale (22:30 UTC = ultima della giornata)
        if [ "$HOUR" = "22" ]; then
          echo "üßπ Esecuzione serale - pulizia giornaliera..."
          # Mantieni solo l'ultimo file della giornata
          LATEST_FILE=$(ls -t "backups/$DATE"/monit_patti_pa_*.csv 2>/dev/null | head -1)
          if [ -n "$LATEST_FILE" ]; then
            # Conta quanti file ci sono prima della pulizia
            FILES_BEFORE=$(ls "backups/$DATE"/monit_patti_pa_*.csv 2>/dev/null | wc -l)
            # Elimina tutti tranne l'ultimo
            find "backups/$DATE" -name "monit_patti_pa_*.csv" -not -path "$LATEST_FILE" -delete
            echo "‚úÖ Pulizia completata. Mantenuto solo: $(basename "$LATEST_FILE")"
            echo "üóëÔ∏è Rimossi $(($FILES_BEFORE - 1)) file precedenti"
          fi
        else
          echo "üìã Esecuzione pomeridiana - backup mantenuto"
        fi
        
    - name: Commit and push changes
      if: steps.changes.outputs.changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add .
        git commit -m "üîÑ Aggiornamento monit_patti_pa.csv $(date -u '+%Y-%m-%d %H:%M UTC')"
        git push
        
        echo "‚úÖ Modifiche salvate su GitHub"
        
    - name: No changes
      if: steps.changes.outputs.changes == 'false'
      run: |
        echo "‚ÑπÔ∏è Nessuna modifica da salvare"
        rm -f new_monit_patti_pa.csv
